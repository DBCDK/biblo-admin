<?php
/**
 * CommentApi
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Api;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * CommentApi Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommentApi
{

    /**
     * API Client
     * @var \DBCDK\CommunityServices\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \DBCDK\CommunityServices\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \DBCDK\CommunityServices\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \DBCDK\CommunityServices\ApiClient $apiClient set the API client
     * @return CommentApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * commentFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Comment[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentFind($filter = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentFindWithHttpInfo ($filter);
        return $response; 
    }


    /**
     * commentFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentFindWithHttpInfo($filter = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Comment[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentUpsert
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Comment $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentUpsert($data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentUpsertWithHttpInfo ($data);
        return $response; 
    }


    /**
     * commentUpsertWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Comment $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentUpsertWithHttpInfo($data = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Comment $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreate($data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentCreateWithHttpInfo ($data);
        return $response; 
    }


    /**
     * commentCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Comment $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateWithHttpInfo($data = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentCreateChangeStreamGetCommentsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateChangeStreamGetCommentsChangeStream($options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentCreateChangeStreamGetCommentsChangeStreamWithHttpInfo ($options);
        return $response; 
    }


    /**
     * commentCreateChangeStreamGetCommentsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateChangeStreamGetCommentsChangeStreamWithHttpInfo($options = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments/change-stream";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentCreateChangeStreamPostCommentsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateChangeStreamPostCommentsChangeStream($options = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentCreateChangeStreamPostCommentsChangeStreamWithHttpInfo ($options);
        return $response; 
    }


    /**
     * commentCreateChangeStreamPostCommentsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateChangeStreamPostCommentsChangeStreamWithHttpInfo($options = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments/change-stream";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        
        // form params
        if ($options !== null) {
            
            
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCount($where = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentCountWithHttpInfo ($where);
        return $response; 
    }


    /**
     * commentCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCountWithHttpInfo($where = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments/count";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentCreateFlag
     *
     * Flag a comment
     *
     * @param string $description  (required)
     * @param double $profileid  (required)
     * @param double $commentid  (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateFlag($description, $profileid, $commentid)
    {
        list($response, $statusCode, $httpHeader) = $this->commentCreateFlagWithHttpInfo ($description, $profileid, $commentid);
        return $response; 
    }


    /**
     * commentCreateFlagWithHttpInfo
     *
     * Flag a comment
     *
     * @param string $description  (required)
     * @param double $profileid  (required)
     * @param double $commentid  (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentCreateFlagWithHttpInfo($description, $profileid, $commentid)
    {
        
        // verify the required parameter 'description' is set
        if ($description === null) {
            throw new \InvalidArgumentException('Missing the required parameter $description when calling commentCreateFlag');
        }
        // verify the required parameter 'profileid' is set
        if ($profileid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profileid when calling commentCreateFlag');
        }
        // verify the required parameter 'commentid' is set
        if ($commentid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $commentid when calling commentCreateFlag');
        }
  
        // parse inputs
        $resourcePath = "/Comments/createFlag";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        
        // form params
        if ($description !== null) {
            
            
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
            
        }// form params
        if ($profileid !== null) {
            
            
            $formParams['profileid'] = $this->apiClient->getSerializer()->toFormValue($profileid);
            
        }// form params
        if ($commentid !== null) {
            
            
            $formParams['commentid'] = $this->apiClient->getSerializer()->toFormValue($commentid);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentFindOne($filter = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentFindOneWithHttpInfo ($filter);
        return $response; 
    }


    /**
     * commentFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentFindOneWithHttpInfo($filter = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments/findOne";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentUpdateAll
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Comment $data An object of model property name/value pairs (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentUpdateAll($where = null, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentUpdateAllWithHttpInfo ($where, $data);
        return $response; 
    }


    /**
     * commentUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Comment $data An object of model property name/value pairs (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentUpdateAllWithHttpInfo($where = null, $data = null)
    {
        
  
        // parse inputs
        $resourcePath = "/Comments/update";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        
        
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse2001'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentFindById
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentFindById($id, $filter = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentFindByIdWithHttpInfo ($id, $filter);
        return $response; 
    }


    /**
     * commentFindByIdWithHttpInfo
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentFindByIdWithHttpInfo($id, $filter = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentFindById');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentExistsHeadCommentsid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentExistsHeadCommentsid($id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentExistsHeadCommentsidWithHttpInfo ($id);
        return $response; 
    }


    /**
     * commentExistsHeadCommentsidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentExistsHeadCommentsidWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentExistsHeadCommentsid');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "HEAD";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data An object of model property name/value pairs (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUpdateAttributes($id, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeUpdateAttributesWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * commentPrototypeUpdateAttributesWithHttpInfo
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data An object of model property name/value pairs (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUpdateAttributesWithHttpInfo($id, $data = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeUpdateAttributes');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentDeleteById
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentDeleteById($id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentDeleteByIdWithHttpInfo ($id);
        return $response; 
    }


    /**
     * commentDeleteByIdWithHttpInfo
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentDeleteByIdWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentDeleteById');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentExistsGetCommentsidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentExistsGetCommentsidExists($id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentExistsGetCommentsidExistsWithHttpInfo ($id);
        return $response; 
    }


    /**
     * commentExistsGetCommentsidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentExistsGetCommentsidExistsWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentExistsGetCommentsidExists');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/exists";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeGetFlags
     *
     * Queries flags of Comment.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Flag[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeGetFlags($id, $filter = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeGetFlagsWithHttpInfo ($id, $filter);
        return $response; 
    }


    /**
     * commentPrototypeGetFlagsWithHttpInfo
     *
     * Queries flags of Comment.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeGetFlagsWithHttpInfo($id, $filter = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeGetFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Flag[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeCreateFlags
     *
     * Creates a new instance in flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeCreateFlags($id, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeCreateFlagsWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * commentPrototypeCreateFlagsWithHttpInfo
     *
     * Creates a new instance in flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeCreateFlagsWithHttpInfo($id, $data = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeCreateFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Flag'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeDeleteFlags
     *
     * Deletes all flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeDeleteFlags($id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeDeleteFlagsWithHttpInfo ($id);
        return $response; 
    }


    /**
     * commentPrototypeDeleteFlagsWithHttpInfo
     *
     * Deletes all flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeDeleteFlagsWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeDeleteFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeCountFlags
     *
     * Counts flags of Comment.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeCountFlags($id, $where = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeCountFlagsWithHttpInfo ($id, $where);
        return $response; 
    }


    /**
     * commentPrototypeCountFlagsWithHttpInfo
     *
     * Counts flags of Comment.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeCountFlagsWithHttpInfo($id, $where = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeCountFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/count";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeExistsFlags
     *
     * Check the existence of flags relation to an item by id.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return bool
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeExistsFlags($fk, $id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeExistsFlagsWithHttpInfo ($fk, $id);
        return $response; 
    }


    /**
     * commentPrototypeExistsFlagsWithHttpInfo
     *
     * Check the existence of flags relation to an item by id.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeExistsFlagsWithHttpInfo($fk, $id)
    {
        
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling commentPrototypeExistsFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeExistsFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/rel/{fk}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "HEAD";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeLinkFlags
     *
     * Add a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\CommentFlag $data  (optional)
     * @return \DBCDK\CommunityServices\Model\CommentFlag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeLinkFlags($fk, $id, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeLinkFlagsWithHttpInfo ($fk, $id, $data);
        return $response; 
    }


    /**
     * commentPrototypeLinkFlagsWithHttpInfo
     *
     * Add a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\CommentFlag $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\CommentFlag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeLinkFlagsWithHttpInfo($fk, $id, $data = null)
    {
        
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling commentPrototypeLinkFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeLinkFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/rel/{fk}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\CommentFlag'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\CommentFlag', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\CommentFlag', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeUnlinkFlags
     *
     * Remove the flags relation to an item by id.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUnlinkFlags($fk, $id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeUnlinkFlagsWithHttpInfo ($fk, $id);
        return $response; 
    }


    /**
     * commentPrototypeUnlinkFlagsWithHttpInfo
     *
     * Remove the flags relation to an item by id.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUnlinkFlagsWithHttpInfo($fk, $id)
    {
        
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling commentPrototypeUnlinkFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeUnlinkFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/rel/{fk}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeFindByIdFlags
     *
     * Find a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeFindByIdFlags($fk, $id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeFindByIdFlagsWithHttpInfo ($fk, $id);
        return $response; 
    }


    /**
     * commentPrototypeFindByIdFlagsWithHttpInfo
     *
     * Find a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeFindByIdFlagsWithHttpInfo($fk, $id)
    {
        
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling commentPrototypeFindByIdFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeFindByIdFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/{fk}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Flag'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeUpdateByIdFlags
     *
     * Update a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUpdateByIdFlags($fk, $id, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeUpdateByIdFlagsWithHttpInfo ($fk, $id, $data);
        return $response; 
    }


    /**
     * commentPrototypeUpdateByIdFlagsWithHttpInfo
     *
     * Update a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUpdateByIdFlagsWithHttpInfo($fk, $id, $data = null)
    {
        
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling commentPrototypeUpdateByIdFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeUpdateByIdFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/{fk}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Flag'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeDestroyByIdFlags
     *
     * Delete a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeDestroyByIdFlags($fk, $id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeDestroyByIdFlagsWithHttpInfo ($fk, $id);
        return $response; 
    }


    /**
     * commentPrototypeDestroyByIdFlagsWithHttpInfo
     *
     * Delete a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeDestroyByIdFlagsWithHttpInfo($fk, $id)
    {
        
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling commentPrototypeDestroyByIdFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeDestroyByIdFlags');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/flags/{fk}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeGetImage
     *
     * Fetches hasOne relation image.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\\SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeGetImage($id, $refresh = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeGetImageWithHttpInfo ($id, $refresh);
        return $response; 
    }


    /**
     * commentPrototypeGetImageWithHttpInfo
     *
     * Fetches hasOne relation image.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeGetImageWithHttpInfo($id, $refresh = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeGetImage');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/image";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\\SplFileObject'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\\SplFileObject', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\\SplFileObject', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeUpdateImage
     *
     * Update image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \SplFileObject $data  (optional)
     * @return \DBCDK\CommunityServices\Model\\SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUpdateImage($id, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeUpdateImageWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * commentPrototypeUpdateImageWithHttpInfo
     *
     * Update image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \SplFileObject $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeUpdateImageWithHttpInfo($id, $data = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeUpdateImage');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/image";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\\SplFileObject'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\\SplFileObject', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\\SplFileObject', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeCreateImage
     *
     * Creates a new instance in image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \SplFileObject $data  (optional)
     * @return \DBCDK\CommunityServices\Model\\SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeCreateImage($id, $data = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeCreateImageWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * commentPrototypeCreateImageWithHttpInfo
     *
     * Creates a new instance in image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \SplFileObject $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeCreateImageWithHttpInfo($id, $data = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeCreateImage');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/image";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\\SplFileObject'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\\SplFileObject', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\\SplFileObject', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeDestroyImage
     *
     * Deletes image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeDestroyImage($id)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeDestroyImageWithHttpInfo ($id);
        return $response; 
    }


    /**
     * commentPrototypeDestroyImageWithHttpInfo
     *
     * Deletes image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeDestroyImageWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeDestroyImage');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/image";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * commentPrototypeGetOwner
     *
     * Fetches belongsTo relation owner.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeGetOwner($id, $refresh = null)
    {
        list($response, $statusCode, $httpHeader) = $this->commentPrototypeGetOwnerWithHttpInfo ($id, $refresh);
        return $response; 
    }


    /**
     * commentPrototypeGetOwnerWithHttpInfo
     *
     * Fetches belongsTo relation owner.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function commentPrototypeGetOwnerWithHttpInfo($id, $refresh = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling commentPrototypeGetOwner');
        }
  
        // parse inputs
        $resourcePath = "/Comments/{id}/owner";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));
  
        // query params
        
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\DBCDK\CommunityServices\Model\Profile'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
