<?php
/**
 * ReviewApi
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Api;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * ReviewApi Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReviewApi
{

    /**
     * API Client
     *
     * @var \DBCDK\CommunityServices\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DBCDK\CommunityServices\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DBCDK\CommunityServices\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DBCDK\CommunityServices\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DBCDK\CommunityServices\ApiClient $apiClient set the API client
     *
     * @return ReviewApi
     */
    public function setApiClient(\DBCDK\CommunityServices\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation reviewCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCount($where = null)
    {
        list($response) = $this->reviewCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation reviewCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/reviews/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/reviews/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Review $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCreate($data = null)
    {
        list($response) = $this->reviewCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation reviewCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Review $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewCreateChangeStreamGetReviewsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCreateChangeStreamGetReviewsChangeStream($options = null)
    {
        list($response) = $this->reviewCreateChangeStreamGetReviewsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation reviewCreateChangeStreamGetReviewsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCreateChangeStreamGetReviewsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/reviews/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/reviews/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewCreateChangeStreamPostReviewsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCreateChangeStreamPostReviewsChangeStream($options = null)
    {
        list($response) = $this->reviewCreateChangeStreamPostReviewsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation reviewCreateChangeStreamPostReviewsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewCreateChangeStreamPostReviewsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/reviews/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/reviews/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewDeleteById
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewDeleteById($id)
    {
        list($response) = $this->reviewDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewDeleteByIdWithHttpInfo
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewDeleteById');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/reviews/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewExistsGetReviewsidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewExistsGetReviewsidExists($id)
    {
        list($response) = $this->reviewExistsGetReviewsidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewExistsGetReviewsidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewExistsGetReviewsidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewExistsGetReviewsidExists');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse2001',
                '/reviews/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewExistsHeadReviewsid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewExistsHeadReviewsid($id)
    {
        list($response) = $this->reviewExistsHeadReviewsidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewExistsHeadReviewsidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewExistsHeadReviewsidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewExistsHeadReviewsid');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse2001',
                '/reviews/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Review[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewFind($filter = null)
    {
        list($response) = $this->reviewFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation reviewFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review[]',
                '/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewFindById
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewFindById($id, $filter = null)
    {
        list($response) = $this->reviewFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation reviewFindByIdWithHttpInfo
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewFindById');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/reviews/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewFindOne($filter = null)
    {
        list($response) = $this->reviewFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation reviewFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/reviews/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/reviews/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeCountFlags
     *
     * Counts flags of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCountFlags($id, $where = null)
    {
        list($response) = $this->reviewPrototypeCountFlagsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation reviewPrototypeCountFlagsWithHttpInfo
     *
     * Counts flags of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCountFlagsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeCountFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/reviews/{id}/flags/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeCountLikes
     *
     * Counts likes of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCountLikes($id, $where = null)
    {
        list($response) = $this->reviewPrototypeCountLikesWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation reviewPrototypeCountLikesWithHttpInfo
     *
     * Counts likes of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCountLikesWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeCountLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/reviews/{id}/likes/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeCreateFlags
     *
     * Creates a new instance in flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateFlags($id, $data = null)
    {
        list($response) = $this->reviewPrototypeCreateFlagsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeCreateFlagsWithHttpInfo
     *
     * Creates a new instance in flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateFlagsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeCreateFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/reviews/{id}/flags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeCreateImage
     *
     * Creates a new instance in image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ImageCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateImage($id, $data = null)
    {
        list($response) = $this->reviewPrototypeCreateImageWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeCreateImageWithHttpInfo
     *
     * Creates a new instance in image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ImageCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateImageWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeCreateImage');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ImageCollection',
                '/reviews/{id}/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ImageCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ImageCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeCreateLikes
     *
     * Creates a new instance in likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Like
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateLikes($id, $data = null)
    {
        list($response) = $this->reviewPrototypeCreateLikesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeCreateLikesWithHttpInfo
     *
     * Creates a new instance in likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Like, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateLikesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeCreateLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like',
                '/reviews/{id}/likes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeCreateVideo
     *
     * Creates a new instance in video of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\VideoCollection $data  (optional)
     * @return \DBCDK\CommunityServices\Model\VideoCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateVideo($id, $data = null)
    {
        list($response) = $this->reviewPrototypeCreateVideoWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeCreateVideoWithHttpInfo
     *
     * Creates a new instance in video of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\VideoCollection $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\VideoCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeCreateVideoWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeCreateVideo');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/video";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\VideoCollection',
                '/reviews/{id}/video'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\VideoCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\VideoCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeDeleteFlags
     *
     * Deletes all flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDeleteFlags($id)
    {
        list($response) = $this->reviewPrototypeDeleteFlagsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewPrototypeDeleteFlagsWithHttpInfo
     *
     * Deletes all flags of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDeleteFlagsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeDeleteFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reviews/{id}/flags'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeDeleteLikes
     *
     * Deletes all likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDeleteLikes($id)
    {
        list($response) = $this->reviewPrototypeDeleteLikesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewPrototypeDeleteLikesWithHttpInfo
     *
     * Deletes all likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDeleteLikesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeDeleteLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reviews/{id}/likes'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeDestroyByIdFlags
     *
     * Delete a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyByIdFlags($fk, $id)
    {
        list($response) = $this->reviewPrototypeDestroyByIdFlagsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation reviewPrototypeDestroyByIdFlagsWithHttpInfo
     *
     * Delete a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyByIdFlagsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling reviewPrototypeDestroyByIdFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeDestroyByIdFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reviews/{id}/flags/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeDestroyByIdLikes
     *
     * Delete a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyByIdLikes($fk, $id)
    {
        list($response) = $this->reviewPrototypeDestroyByIdLikesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation reviewPrototypeDestroyByIdLikesWithHttpInfo
     *
     * Delete a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyByIdLikesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling reviewPrototypeDestroyByIdLikes');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeDestroyByIdLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reviews/{id}/likes/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeDestroyImage
     *
     * Deletes image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyImage($id)
    {
        list($response) = $this->reviewPrototypeDestroyImageWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewPrototypeDestroyImageWithHttpInfo
     *
     * Deletes image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyImageWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeDestroyImage');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reviews/{id}/image'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeDestroyVideo
     *
     * Deletes video of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyVideo($id)
    {
        list($response) = $this->reviewPrototypeDestroyVideoWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reviewPrototypeDestroyVideoWithHttpInfo
     *
     * Deletes video of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeDestroyVideoWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeDestroyVideo');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/video";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reviews/{id}/video'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeFindByIdFlags
     *
     * Find a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeFindByIdFlags($fk, $id)
    {
        list($response) = $this->reviewPrototypeFindByIdFlagsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation reviewPrototypeFindByIdFlagsWithHttpInfo
     *
     * Find a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeFindByIdFlagsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling reviewPrototypeFindByIdFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeFindByIdFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/reviews/{id}/flags/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeFindByIdLikes
     *
     * Find a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Like
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeFindByIdLikes($fk, $id)
    {
        list($response) = $this->reviewPrototypeFindByIdLikesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation reviewPrototypeFindByIdLikesWithHttpInfo
     *
     * Find a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Like, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeFindByIdLikesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling reviewPrototypeFindByIdLikes');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeFindByIdLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like',
                '/reviews/{id}/likes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeGetFlags
     *
     * Queries flags of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Flag[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetFlags($id, $filter = null)
    {
        list($response) = $this->reviewPrototypeGetFlagsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation reviewPrototypeGetFlagsWithHttpInfo
     *
     * Queries flags of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetFlagsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeGetFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag[]',
                '/reviews/{id}/flags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeGetImage
     *
     * Fetches hasOne relation image.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\ImageCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetImage($id, $refresh = null)
    {
        list($response) = $this->reviewPrototypeGetImageWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation reviewPrototypeGetImageWithHttpInfo
     *
     * Fetches hasOne relation image.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ImageCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetImageWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeGetImage');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ImageCollection',
                '/reviews/{id}/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ImageCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ImageCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeGetLikes
     *
     * Queries likes of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Like[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetLikes($id, $filter = null)
    {
        list($response) = $this->reviewPrototypeGetLikesWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation reviewPrototypeGetLikesWithHttpInfo
     *
     * Queries likes of review.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Like[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetLikesWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeGetLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like[]',
                '/reviews/{id}/likes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeGetOwner
     *
     * Fetches belongsTo relation owner.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetOwner($id, $refresh = null)
    {
        list($response) = $this->reviewPrototypeGetOwnerWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation reviewPrototypeGetOwnerWithHttpInfo
     *
     * Fetches belongsTo relation owner.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetOwnerWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeGetOwner');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/owner";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/reviews/{id}/owner'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeGetVideo
     *
     * Fetches hasOne relation video.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\VideoCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetVideo($id, $refresh = null)
    {
        list($response) = $this->reviewPrototypeGetVideoWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation reviewPrototypeGetVideoWithHttpInfo
     *
     * Fetches hasOne relation video.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\VideoCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeGetVideoWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeGetVideo');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/video";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\VideoCollection',
                '/reviews/{id}/video'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\VideoCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\VideoCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data An object of model property name/value pairs (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateAttributes($id, $data = null)
    {
        list($response) = $this->reviewPrototypeUpdateAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeUpdateAttributesWithHttpInfo
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data An object of model property name/value pairs (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeUpdateAttributes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/reviews/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeUpdateByIdFlags
     *
     * Update a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateByIdFlags($fk, $id, $data = null)
    {
        list($response) = $this->reviewPrototypeUpdateByIdFlagsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeUpdateByIdFlagsWithHttpInfo
     *
     * Update a related item by id for flags.
     *
     * @param string $fk Foreign key for flags (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateByIdFlagsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling reviewPrototypeUpdateByIdFlags');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeUpdateByIdFlags');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/flags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/reviews/{id}/flags/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeUpdateByIdLikes
     *
     * Update a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Like
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateByIdLikes($fk, $id, $data = null)
    {
        list($response) = $this->reviewPrototypeUpdateByIdLikesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeUpdateByIdLikesWithHttpInfo
     *
     * Update a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Like, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateByIdLikesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling reviewPrototypeUpdateByIdLikes');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeUpdateByIdLikes');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/likes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like',
                '/reviews/{id}/likes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeUpdateImage
     *
     * Update image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ImageCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateImage($id, $data = null)
    {
        list($response) = $this->reviewPrototypeUpdateImageWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeUpdateImageWithHttpInfo
     *
     * Update image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ImageCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateImageWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeUpdateImage');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ImageCollection',
                '/reviews/{id}/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ImageCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ImageCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewPrototypeUpdateVideo
     *
     * Update video of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\VideoCollection $data  (optional)
     * @return \DBCDK\CommunityServices\Model\VideoCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateVideo($id, $data = null)
    {
        list($response) = $this->reviewPrototypeUpdateVideoWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation reviewPrototypeUpdateVideoWithHttpInfo
     *
     * Update video of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\VideoCollection $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\VideoCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewPrototypeUpdateVideoWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reviewPrototypeUpdateVideo');
        }
        // parse inputs
        $resourcePath = "/reviews/{id}/video";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\VideoCollection',
                '/reviews/{id}/video'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\VideoCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\VideoCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewUpdateAll
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Review $data An object of model property name/value pairs (optional)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewUpdateAll($where = null, $data = null)
    {
        list($response) = $this->reviewUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation reviewUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Review $data An object of model property name/value pairs (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/reviews/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/reviews/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reviewUpsert
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Review $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewUpsert($data = null)
    {
        list($response) = $this->reviewUpsertWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation reviewUpsertWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Review $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function reviewUpsertWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
