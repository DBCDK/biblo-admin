<?php
/**
 * ProfileApi
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Api;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * ProfileApi Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProfileApi
{

    /**
     * API Client
     *
     * @var \DBCDK\CommunityServices\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DBCDK\CommunityServices\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DBCDK\CommunityServices\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DBCDK\CommunityServices\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DBCDK\CommunityServices\ApiClient $apiClient set the API client
     *
     * @return ProfileApi
     */
    public function setApiClient(\DBCDK\CommunityServices\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation profileCheckIfDisplayNameIsTaken
     *
     * Check if displayname exists
     *
     * @param string $displayname The users displayname (required)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCheckIfDisplayNameIsTaken($displayname)
    {
        list($response) = $this->profileCheckIfDisplayNameIsTakenWithHttpInfo($displayname);
        return $response;
    }

    /**
     * Operation profileCheckIfDisplayNameIsTakenWithHttpInfo
     *
     * Check if displayname exists
     *
     * @param string $displayname The users displayname (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCheckIfDisplayNameIsTakenWithHttpInfo($displayname)
    {
        // verify the required parameter 'displayname' is set
        if ($displayname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $displayname when calling profileCheckIfDisplayNameIsTaken');
        }
        // parse inputs
        $resourcePath = "/Profiles/checkIfDisplayNameIsTaken";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($displayname !== null) {
            $formParams['displayname'] = $this->apiClient->getSerializer()->toFormValue($displayname);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Profiles/checkIfDisplayNameIsTaken'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileCheckIfUserExists
     *
     * Check if a user exists.
     *
     * @param string $username  (required)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCheckIfUserExists($username)
    {
        list($response) = $this->profileCheckIfUserExistsWithHttpInfo($username);
        return $response;
    }

    /**
     * Operation profileCheckIfUserExistsWithHttpInfo
     *
     * Check if a user exists.
     *
     * @param string $username  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCheckIfUserExistsWithHttpInfo($username)
    {
        // verify the required parameter 'username' is set
        if ($username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling profileCheckIfUserExists');
        }
        // parse inputs
        $resourcePath = "/Profiles/checkIfUserExists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Profiles/checkIfUserExists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCount($where = null)
    {
        list($response) = $this->profileCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation profileCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/Profiles/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Profile $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCreate($data = null)
    {
        list($response) = $this->profileCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation profileCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Profile $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Profiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileCreateChangeStreamGetProfilesChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCreateChangeStreamGetProfilesChangeStream($options = null)
    {
        list($response) = $this->profileCreateChangeStreamGetProfilesChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation profileCreateChangeStreamGetProfilesChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCreateChangeStreamGetProfilesChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Profiles/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Profiles/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileCreateChangeStreamPostProfilesChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCreateChangeStreamPostProfilesChangeStream($options = null)
    {
        list($response) = $this->profileCreateChangeStreamPostProfilesChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation profileCreateChangeStreamPostProfilesChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileCreateChangeStreamPostProfilesChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Profiles/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Profiles/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileDeleteById
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileDeleteById($id)
    {
        list($response) = $this->profileDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profileDeleteByIdWithHttpInfo
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profileDeleteById');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Profiles/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileExistsGetProfilesidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileExistsGetProfilesidExists($id)
    {
        list($response) = $this->profileExistsGetProfilesidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profileExistsGetProfilesidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileExistsGetProfilesidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profileExistsGetProfilesidExists');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse2001',
                '/Profiles/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileExistsHeadProfilesid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileExistsHeadProfilesid($id)
    {
        list($response) = $this->profileExistsHeadProfilesidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profileExistsHeadProfilesidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileExistsHeadProfilesidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profileExistsHeadProfilesid');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse2001',
                '/Profiles/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Profile[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileFind($filter = null)
    {
        list($response) = $this->profileFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation profileFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Profiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile[]',
                '/Profiles'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileFindById
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileFindById($id, $filter = null)
    {
        list($response) = $this->profileFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profileFindByIdWithHttpInfo
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profileFindById');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileFindOne($filter = null)
    {
        list($response) = $this->profileFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation profileFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Profiles/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileLogout
     *
     * Logout a user with access token.
     *
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileLogout()
    {
        list($response) = $this->profileLogoutWithHttpInfo();
        return $response;
    }

    /**
     * Operation profileLogoutWithHttpInfo
     *
     * Logout a user with access token.
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileLogoutWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Profiles/logout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/logout'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountAccessTokens
     *
     * Counts accessTokens of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountAccessTokens($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountAccessTokensWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountAccessTokensWithHttpInfo
     *
     * Counts accessTokens of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountAccessTokensWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/accessTokens/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountComments
     *
     * Counts comments of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountComments($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountCommentsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountCommentsWithHttpInfo
     *
     * Counts comments of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountCommentsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/comments/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountCommunityRoles
     *
     * Counts communityRoles of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountCommunityRoles($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountCommunityRolesWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountCommunityRolesWithHttpInfo
     *
     * Counts communityRoles of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountCommunityRolesWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/communityRoles/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountGroups
     *
     * Counts groups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountGroups($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountGroupsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountGroupsWithHttpInfo
     *
     * Counts groups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountGroupsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/groups/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountLikes
     *
     * Counts likes of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountLikes($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountLikesWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountLikesWithHttpInfo
     *
     * Counts likes of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountLikesWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/likes/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountOwnedGroups
     *
     * Counts ownedGroups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountOwnedGroups($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountOwnedGroupsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountOwnedGroupsWithHttpInfo
     *
     * Counts ownedGroups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountOwnedGroupsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/ownedGroups/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountPosts
     *
     * Counts posts of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountPosts($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountPostsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountPostsWithHttpInfo
     *
     * Counts posts of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountPostsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountPosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/posts/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountQuarantines
     *
     * Counts quarantines of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountQuarantines($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountQuarantinesWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountQuarantinesWithHttpInfo
     *
     * Counts quarantines of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountQuarantinesWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/quarantines/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCountReviews
     *
     * Counts reviews of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountReviews($id, $where = null)
    {
        list($response) = $this->profilePrototypeCountReviewsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation profilePrototypeCountReviewsWithHttpInfo
     *
     * Counts reviews of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCountReviewsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCountReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Profiles/{id}/reviews/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateAccessTokens
     *
     * Creates a new instance in accessTokens of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\AccessToken $data  (optional)
     * @return \DBCDK\CommunityServices\Model\AccessToken
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateAccessTokens($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateAccessTokensWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateAccessTokensWithHttpInfo
     *
     * Creates a new instance in accessTokens of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\AccessToken $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateAccessTokensWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\AccessToken',
                '/Profiles/{id}/accessTokens'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\AccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateComments
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateComments($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateCommentsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateCommentsWithHttpInfo
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateCommentsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment',
                '/Profiles/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateCommunityRoles
     *
     * Creates a new instance in communityRoles of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\CommunityRole $data  (optional)
     * @return \DBCDK\CommunityServices\Model\CommunityRole
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateCommunityRoles($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateCommunityRolesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateCommunityRolesWithHttpInfo
     *
     * Creates a new instance in communityRoles of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\CommunityRole $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\CommunityRole, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateCommunityRolesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\CommunityRole',
                '/Profiles/{id}/communityRoles'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\CommunityRole', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\CommunityRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateGroups
     *
     * Creates a new instance in groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Group
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateGroups($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateGroupsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateGroupsWithHttpInfo
     *
     * Creates a new instance in groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Group, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateGroupsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group',
                '/Profiles/{id}/groups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateImage
     *
     * Creates a new instance in image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ImageCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateImage($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateImageWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateImageWithHttpInfo
     *
     * Creates a new instance in image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ImageCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateImageWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateImage');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ImageCollection',
                '/Profiles/{id}/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ImageCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ImageCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateLikes
     *
     * Creates a new instance in likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Like
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateLikes($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateLikesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateLikesWithHttpInfo
     *
     * Creates a new instance in likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Like, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateLikesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like',
                '/Profiles/{id}/likes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateOwnedGroups
     *
     * Creates a new instance in ownedGroups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Profile $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateOwnedGroups($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateOwnedGroupsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateOwnedGroupsWithHttpInfo
     *
     * Creates a new instance in ownedGroups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Profile $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateOwnedGroupsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles/{id}/ownedGroups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreatePosts
     *
     * Creates a new instance in posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Post
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreatePosts($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreatePostsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreatePostsWithHttpInfo
     *
     * Creates a new instance in posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Post, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreatePostsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreatePosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post',
                '/Profiles/{id}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateQuarantines
     *
     * Creates a new instance in quarantines of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Quarantine $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Quarantine
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateQuarantines($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateQuarantinesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateQuarantinesWithHttpInfo
     *
     * Creates a new instance in quarantines of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Quarantine $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Quarantine, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateQuarantinesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Quarantine',
                '/Profiles/{id}/quarantines'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Quarantine', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Quarantine', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeCreateReviews
     *
     * Creates a new instance in reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateReviews($id, $data = null)
    {
        list($response) = $this->profilePrototypeCreateReviewsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeCreateReviewsWithHttpInfo
     *
     * Creates a new instance in reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeCreateReviewsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeCreateReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/Profiles/{id}/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteAccessTokens
     *
     * Deletes all accessTokens of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteAccessTokens($id)
    {
        list($response) = $this->profilePrototypeDeleteAccessTokensWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteAccessTokensWithHttpInfo
     *
     * Deletes all accessTokens of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteAccessTokensWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/accessTokens'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteComments
     *
     * Deletes all comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteComments($id)
    {
        list($response) = $this->profilePrototypeDeleteCommentsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteCommentsWithHttpInfo
     *
     * Deletes all comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteCommentsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/comments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteCommunityRoles
     *
     * Deletes all communityRoles of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteCommunityRoles($id)
    {
        list($response) = $this->profilePrototypeDeleteCommunityRolesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteCommunityRolesWithHttpInfo
     *
     * Deletes all communityRoles of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteCommunityRolesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/communityRoles'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteGroups
     *
     * Deletes all groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteGroups($id)
    {
        list($response) = $this->profilePrototypeDeleteGroupsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteGroupsWithHttpInfo
     *
     * Deletes all groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteGroupsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/groups'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteLikes
     *
     * Deletes all likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteLikes($id)
    {
        list($response) = $this->profilePrototypeDeleteLikesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteLikesWithHttpInfo
     *
     * Deletes all likes of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteLikesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/likes'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteOwnedGroups
     *
     * Deletes all ownedGroups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteOwnedGroups($id)
    {
        list($response) = $this->profilePrototypeDeleteOwnedGroupsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteOwnedGroupsWithHttpInfo
     *
     * Deletes all ownedGroups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteOwnedGroupsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/ownedGroups'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeletePosts
     *
     * Deletes all posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeletePosts($id)
    {
        list($response) = $this->profilePrototypeDeletePostsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeletePostsWithHttpInfo
     *
     * Deletes all posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeletePostsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeletePosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/posts'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteQuarantines
     *
     * Deletes all quarantines of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteQuarantines($id)
    {
        list($response) = $this->profilePrototypeDeleteQuarantinesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteQuarantinesWithHttpInfo
     *
     * Deletes all quarantines of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteQuarantinesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/quarantines'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDeleteReviews
     *
     * Deletes all reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteReviews($id)
    {
        list($response) = $this->profilePrototypeDeleteReviewsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDeleteReviewsWithHttpInfo
     *
     * Deletes all reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDeleteReviewsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDeleteReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/reviews'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdAccessTokens
     *
     * Delete a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdAccessTokens($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdAccessTokensWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdAccessTokensWithHttpInfo
     *
     * Delete a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdAccessTokensWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdAccessTokens');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/accessTokens/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdComments
     *
     * Delete a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdComments($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdCommentsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdCommentsWithHttpInfo
     *
     * Delete a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdCommentsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdComments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/comments/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdCommunityRoles
     *
     * Delete a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdCommunityRoles($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdCommunityRolesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdCommunityRolesWithHttpInfo
     *
     * Delete a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdCommunityRolesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdCommunityRoles');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/communityRoles/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdGroups
     *
     * Delete a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdGroupsWithHttpInfo
     *
     * Delete a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/groups/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdLikes
     *
     * Delete a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdLikes($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdLikesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdLikesWithHttpInfo
     *
     * Delete a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdLikesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdLikes');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/likes/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdOwnedGroups
     *
     * Delete a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdOwnedGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdOwnedGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdOwnedGroupsWithHttpInfo
     *
     * Delete a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdOwnedGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdOwnedGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/ownedGroups/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdPosts
     *
     * Delete a related item by id for posts.
     *
     * @param string $fk Foreign key for posts (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdPosts($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdPostsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdPostsWithHttpInfo
     *
     * Delete a related item by id for posts.
     *
     * @param string $fk Foreign key for posts (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdPostsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdPosts');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdPosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/posts/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdQuarantines
     *
     * Delete a related item by id for quarantines.
     *
     * @param string $fk Foreign key for quarantines (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdQuarantines($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdQuarantinesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdQuarantinesWithHttpInfo
     *
     * Delete a related item by id for quarantines.
     *
     * @param string $fk Foreign key for quarantines (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdQuarantinesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdQuarantines');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/quarantines/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyByIdReviews
     *
     * Delete a related item by id for reviews.
     *
     * @param string $fk Foreign key for reviews (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdReviews($fk, $id)
    {
        list($response) = $this->profilePrototypeDestroyByIdReviewsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyByIdReviewsWithHttpInfo
     *
     * Delete a related item by id for reviews.
     *
     * @param string $fk Foreign key for reviews (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyByIdReviewsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeDestroyByIdReviews');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyByIdReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/reviews/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeDestroyImage
     *
     * Deletes image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyImage($id)
    {
        list($response) = $this->profilePrototypeDestroyImageWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation profilePrototypeDestroyImageWithHttpInfo
     *
     * Deletes image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeDestroyImageWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeDestroyImage');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/image'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeExistsComments
     *
     * Check the existence of comments relation to an item by id.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return bool
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsComments($fk, $id)
    {
        list($response) = $this->profilePrototypeExistsCommentsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeExistsCommentsWithHttpInfo
     *
     * Check the existence of comments relation to an item by id.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsCommentsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeExistsComments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeExistsComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Profiles/{id}/comments/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeExistsCommunityRoles
     *
     * Check the existence of communityRoles relation to an item by id.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return bool
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsCommunityRoles($fk, $id)
    {
        list($response) = $this->profilePrototypeExistsCommunityRolesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeExistsCommunityRolesWithHttpInfo
     *
     * Check the existence of communityRoles relation to an item by id.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsCommunityRolesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeExistsCommunityRoles');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeExistsCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Profiles/{id}/communityRoles/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeExistsGroups
     *
     * Check the existence of groups relation to an item by id.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return bool
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeExistsGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeExistsGroupsWithHttpInfo
     *
     * Check the existence of groups relation to an item by id.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeExistsGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeExistsGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Profiles/{id}/groups/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeExistsOwnedGroups
     *
     * Check the existence of ownedGroups relation to an item by id.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return bool
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsOwnedGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeExistsOwnedGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeExistsOwnedGroupsWithHttpInfo
     *
     * Check the existence of ownedGroups relation to an item by id.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeExistsOwnedGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeExistsOwnedGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeExistsOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Profiles/{id}/ownedGroups/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdAccessTokens
     *
     * Find a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\AccessToken
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdAccessTokens($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdAccessTokensWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdAccessTokensWithHttpInfo
     *
     * Find a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdAccessTokensWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdAccessTokens');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\AccessToken',
                '/Profiles/{id}/accessTokens/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\AccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdComments
     *
     * Find a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdComments($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdCommentsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdCommentsWithHttpInfo
     *
     * Find a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdCommentsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdComments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment',
                '/Profiles/{id}/comments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdCommunityRoles
     *
     * Find a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\CommunityRole
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdCommunityRoles($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdCommunityRolesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdCommunityRolesWithHttpInfo
     *
     * Find a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\CommunityRole, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdCommunityRolesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdCommunityRoles');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\CommunityRole',
                '/Profiles/{id}/communityRoles/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\CommunityRole', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\CommunityRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdGroups
     *
     * Find a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Group
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdGroupsWithHttpInfo
     *
     * Find a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Group, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group',
                '/Profiles/{id}/groups/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdLikes
     *
     * Find a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Like
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdLikes($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdLikesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdLikesWithHttpInfo
     *
     * Find a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Like, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdLikesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdLikes');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like',
                '/Profiles/{id}/likes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdOwnedGroups
     *
     * Find a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdOwnedGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdOwnedGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdOwnedGroupsWithHttpInfo
     *
     * Find a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdOwnedGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdOwnedGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles/{id}/ownedGroups/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdPosts
     *
     * Find a related item by id for posts.
     *
     * @param string $fk Foreign key for posts (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Post
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdPosts($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdPostsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdPostsWithHttpInfo
     *
     * Find a related item by id for posts.
     *
     * @param string $fk Foreign key for posts (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Post, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdPostsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdPosts');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdPosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post',
                '/Profiles/{id}/posts/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdQuarantines
     *
     * Find a related item by id for quarantines.
     *
     * @param string $fk Foreign key for quarantines (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Quarantine
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdQuarantines($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdQuarantinesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdQuarantinesWithHttpInfo
     *
     * Find a related item by id for quarantines.
     *
     * @param string $fk Foreign key for quarantines (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Quarantine, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdQuarantinesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdQuarantines');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Quarantine',
                '/Profiles/{id}/quarantines/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Quarantine', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Quarantine', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeFindByIdReviews
     *
     * Find a related item by id for reviews.
     *
     * @param string $fk Foreign key for reviews (required)
     * @param string $id PersistedModel id (required)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdReviews($fk, $id)
    {
        list($response) = $this->profilePrototypeFindByIdReviewsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeFindByIdReviewsWithHttpInfo
     *
     * Find a related item by id for reviews.
     *
     * @param string $fk Foreign key for reviews (required)
     * @param string $id PersistedModel id (required)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeFindByIdReviewsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeFindByIdReviews');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeFindByIdReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/Profiles/{id}/reviews/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetAccessTokens
     *
     * Queries accessTokens of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\AccessToken[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetAccessTokens($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetAccessTokensWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetAccessTokensWithHttpInfo
     *
     * Queries accessTokens of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\AccessToken[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetAccessTokensWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\AccessToken[]',
                '/Profiles/{id}/accessTokens'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\AccessToken[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\AccessToken[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetComments
     *
     * Queries comments of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Comment[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetComments($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetCommentsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetCommentsWithHttpInfo
     *
     * Queries comments of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetCommentsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment[]',
                '/Profiles/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetCommunityRoles
     *
     * Queries communityRoles of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\CommunityRole[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetCommunityRoles($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetCommunityRolesWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetCommunityRolesWithHttpInfo
     *
     * Queries communityRoles of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\CommunityRole[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetCommunityRolesWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\CommunityRole[]',
                '/Profiles/{id}/communityRoles'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\CommunityRole[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\CommunityRole[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetGroups
     *
     * Queries groups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Group[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetGroups($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetGroupsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetGroupsWithHttpInfo
     *
     * Queries groups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetGroupsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group[]',
                '/Profiles/{id}/groups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetImage
     *
     * Fetches hasOne relation image.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\ImageCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetImage($id, $refresh = null)
    {
        list($response) = $this->profilePrototypeGetImageWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation profilePrototypeGetImageWithHttpInfo
     *
     * Fetches hasOne relation image.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ImageCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetImageWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetImage');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ImageCollection',
                '/Profiles/{id}/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ImageCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ImageCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetLikes
     *
     * Queries likes of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Like[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetLikes($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetLikesWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetLikesWithHttpInfo
     *
     * Queries likes of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Like[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetLikesWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like[]',
                '/Profiles/{id}/likes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetOwnedGroups
     *
     * Queries ownedGroups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Profile[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetOwnedGroups($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetOwnedGroupsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetOwnedGroupsWithHttpInfo
     *
     * Queries ownedGroups of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetOwnedGroupsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile[]',
                '/Profiles/{id}/ownedGroups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetPosts
     *
     * Queries posts of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Post[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetPosts($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetPostsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetPostsWithHttpInfo
     *
     * Queries posts of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Post[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetPostsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetPosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post[]',
                '/Profiles/{id}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetQuarantines
     *
     * Queries quarantines of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Quarantine[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetQuarantines($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetQuarantinesWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetQuarantinesWithHttpInfo
     *
     * Queries quarantines of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Quarantine[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetQuarantinesWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Quarantine[]',
                '/Profiles/{id}/quarantines'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Quarantine[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Quarantine[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeGetReviews
     *
     * Queries reviews of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return \DBCDK\CommunityServices\Model\Review[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetReviews($id, $filter = null)
    {
        list($response) = $this->profilePrototypeGetReviewsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation profilePrototypeGetReviewsWithHttpInfo
     *
     * Queries reviews of Profile.
     *
     * @param string $id PersistedModel id (required)
     * @param string $filter  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeGetReviewsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeGetReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review[]',
                '/Profiles/{id}/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeLinkComments
     *
     * Add a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ProfileComment $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ProfileComment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkComments($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeLinkCommentsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeLinkCommentsWithHttpInfo
     *
     * Add a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ProfileComment $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ProfileComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkCommentsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeLinkComments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeLinkComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ProfileComment',
                '/Profiles/{id}/comments/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ProfileComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ProfileComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeLinkCommunityRoles
     *
     * Add a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ProfileCommunityRole $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ProfileCommunityRole
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkCommunityRoles($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeLinkCommunityRolesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeLinkCommunityRolesWithHttpInfo
     *
     * Add a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ProfileCommunityRole $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ProfileCommunityRole, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkCommunityRolesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeLinkCommunityRoles');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeLinkCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ProfileCommunityRole',
                '/Profiles/{id}/communityRoles/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ProfileCommunityRole', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ProfileCommunityRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeLinkGroups
     *
     * Add a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\GroupProfile $data  (optional)
     * @return \DBCDK\CommunityServices\Model\GroupProfile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkGroups($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeLinkGroupsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeLinkGroupsWithHttpInfo
     *
     * Add a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\GroupProfile $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\GroupProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkGroupsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeLinkGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeLinkGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\GroupProfile',
                '/Profiles/{id}/groups/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\GroupProfile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\GroupProfile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeLinkOwnedGroups
     *
     * Add a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ProfileProfile $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ProfileProfile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkOwnedGroups($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeLinkOwnedGroupsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeLinkOwnedGroupsWithHttpInfo
     *
     * Add a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ProfileProfile $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ProfileProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeLinkOwnedGroupsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeLinkOwnedGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeLinkOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ProfileProfile',
                '/Profiles/{id}/ownedGroups/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ProfileProfile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ProfileProfile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUnlinkComments
     *
     * Remove the comments relation to an item by id.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkComments($fk, $id)
    {
        list($response) = $this->profilePrototypeUnlinkCommentsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeUnlinkCommentsWithHttpInfo
     *
     * Remove the comments relation to an item by id.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkCommentsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUnlinkComments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUnlinkComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/comments/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUnlinkCommunityRoles
     *
     * Remove the communityRoles relation to an item by id.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkCommunityRoles($fk, $id)
    {
        list($response) = $this->profilePrototypeUnlinkCommunityRolesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeUnlinkCommunityRolesWithHttpInfo
     *
     * Remove the communityRoles relation to an item by id.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkCommunityRolesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUnlinkCommunityRoles');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUnlinkCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/communityRoles/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUnlinkGroups
     *
     * Remove the groups relation to an item by id.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeUnlinkGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeUnlinkGroupsWithHttpInfo
     *
     * Remove the groups relation to an item by id.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUnlinkGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUnlinkGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/groups/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUnlinkOwnedGroups
     *
     * Remove the ownedGroups relation to an item by id.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkOwnedGroups($fk, $id)
    {
        list($response) = $this->profilePrototypeUnlinkOwnedGroupsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation profilePrototypeUnlinkOwnedGroupsWithHttpInfo
     *
     * Remove the ownedGroups relation to an item by id.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUnlinkOwnedGroupsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUnlinkOwnedGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUnlinkOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Profiles/{id}/ownedGroups/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Profile $data An object of model property name/value pairs (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateAttributes($id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateAttributesWithHttpInfo
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Profile $data An object of model property name/value pairs (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateAttributes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdAccessTokens
     *
     * Update a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\AccessToken $data  (optional)
     * @return \DBCDK\CommunityServices\Model\AccessToken
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdAccessTokens($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdAccessTokensWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdAccessTokensWithHttpInfo
     *
     * Update a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\AccessToken $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdAccessTokensWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdAccessTokens');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdAccessTokens');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\AccessToken',
                '/Profiles/{id}/accessTokens/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\AccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdComments
     *
     * Update a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdComments($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdCommentsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdCommentsWithHttpInfo
     *
     * Update a related item by id for comments.
     *
     * @param string $fk Foreign key for comments (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdCommentsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdComments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdComments');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment',
                '/Profiles/{id}/comments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdCommunityRoles
     *
     * Update a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\CommunityRole $data  (optional)
     * @return \DBCDK\CommunityServices\Model\CommunityRole
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdCommunityRoles($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdCommunityRolesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdCommunityRolesWithHttpInfo
     *
     * Update a related item by id for communityRoles.
     *
     * @param string $fk Foreign key for communityRoles (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\CommunityRole $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\CommunityRole, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdCommunityRolesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdCommunityRoles');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdCommunityRoles');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/communityRoles/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\CommunityRole',
                '/Profiles/{id}/communityRoles/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\CommunityRole', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\CommunityRole', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdGroups
     *
     * Update a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Group
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdGroups($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdGroupsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdGroupsWithHttpInfo
     *
     * Update a related item by id for groups.
     *
     * @param string $fk Foreign key for groups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Group, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdGroupsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/groups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group',
                '/Profiles/{id}/groups/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdLikes
     *
     * Update a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Like
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdLikes($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdLikesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdLikesWithHttpInfo
     *
     * Update a related item by id for likes.
     *
     * @param string $fk Foreign key for likes (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Like $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Like, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdLikesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdLikes');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdLikes');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/likes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Like',
                '/Profiles/{id}/likes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Like', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Like', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdOwnedGroups
     *
     * Update a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Profile $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdOwnedGroups($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdOwnedGroupsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdOwnedGroupsWithHttpInfo
     *
     * Update a related item by id for ownedGroups.
     *
     * @param string $fk Foreign key for ownedGroups (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Profile $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdOwnedGroupsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdOwnedGroups');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdOwnedGroups');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/ownedGroups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles/{id}/ownedGroups/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdPosts
     *
     * Update a related item by id for posts.
     *
     * @param string $fk Foreign key for posts (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Post
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdPosts($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdPostsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdPostsWithHttpInfo
     *
     * Update a related item by id for posts.
     *
     * @param string $fk Foreign key for posts (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Post, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdPostsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdPosts');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdPosts');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/posts/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post',
                '/Profiles/{id}/posts/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdQuarantines
     *
     * Update a related item by id for quarantines.
     *
     * @param string $fk Foreign key for quarantines (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Quarantine $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Quarantine
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdQuarantines($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdQuarantinesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdQuarantinesWithHttpInfo
     *
     * Update a related item by id for quarantines.
     *
     * @param string $fk Foreign key for quarantines (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Quarantine $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Quarantine, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdQuarantinesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdQuarantines');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdQuarantines');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/quarantines/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Quarantine',
                '/Profiles/{id}/quarantines/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Quarantine', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Quarantine', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateByIdReviews
     *
     * Update a related item by id for reviews.
     *
     * @param string $fk Foreign key for reviews (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdReviews($fk, $id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateByIdReviewsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateByIdReviewsWithHttpInfo
     *
     * Update a related item by id for reviews.
     *
     * @param string $fk Foreign key for reviews (required)
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateByIdReviewsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling profilePrototypeUpdateByIdReviews');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateByIdReviews');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/reviews/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/Profiles/{id}/reviews/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilePrototypeUpdateImage
     *
     * Update image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return \DBCDK\CommunityServices\Model\ImageCollection
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateImage($id, $data = null)
    {
        list($response) = $this->profilePrototypeUpdateImageWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation profilePrototypeUpdateImageWithHttpInfo
     *
     * Update image of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\ImageCollection $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\ImageCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profilePrototypeUpdateImageWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling profilePrototypeUpdateImage');
        }
        // parse inputs
        $resourcePath = "/Profiles/{id}/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\ImageCollection',
                '/Profiles/{id}/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\ImageCollection', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\ImageCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileUnilogin
     *
     * Login a user with unilogin.
     *
     * @param string $username  (required)
     * @param string $timestamp  (required)
     * @param string $authtoken  (required)
     * @param double $ttl  (required)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileUnilogin($username, $timestamp, $authtoken, $ttl)
    {
        list($response) = $this->profileUniloginWithHttpInfo($username, $timestamp, $authtoken, $ttl);
        return $response;
    }

    /**
     * Operation profileUniloginWithHttpInfo
     *
     * Login a user with unilogin.
     *
     * @param string $username  (required)
     * @param string $timestamp  (required)
     * @param string $authtoken  (required)
     * @param double $ttl  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileUniloginWithHttpInfo($username, $timestamp, $authtoken, $ttl)
    {
        // verify the required parameter 'username' is set
        if ($username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling profileUnilogin');
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $timestamp when calling profileUnilogin');
        }
        // verify the required parameter 'authtoken' is set
        if ($authtoken === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authtoken when calling profileUnilogin');
        }
        // verify the required parameter 'ttl' is set
        if ($ttl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ttl when calling profileUnilogin');
        }
        // parse inputs
        $resourcePath = "/Profiles/unilogin";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($timestamp !== null) {
            $formParams['timestamp'] = $this->apiClient->getSerializer()->toFormValue($timestamp);
        }
        // form params
        if ($authtoken !== null) {
            $formParams['authtoken'] = $this->apiClient->getSerializer()->toFormValue($authtoken);
        }
        // form params
        if ($ttl !== null) {
            $formParams['ttl'] = $this->apiClient->getSerializer()->toFormValue($ttl);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Profiles/unilogin'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileUpdateAll
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Profile $data An object of model property name/value pairs (optional)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileUpdateAll($where = null, $data = null)
    {
        list($response) = $this->profileUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation profileUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Profile $data An object of model property name/value pairs (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Profiles/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Profiles/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileUpsert
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Profile $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileUpsert($data = null)
    {
        list($response) = $this->profileUpsertWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation profileUpsertWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Profile $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function profileUpsertWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Profiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Profiles'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
