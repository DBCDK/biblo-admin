<?php
/**
 * FlagApi
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Api;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * FlagApi Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlagApi
{

    /**
     * API Client
     *
     * @var \DBCDK\CommunityServices\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DBCDK\CommunityServices\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DBCDK\CommunityServices\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DBCDK\CommunityServices\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DBCDK\CommunityServices\ApiClient $apiClient set the API client
     *
     * @return FlagApi
     */
    public function setApiClient(\DBCDK\CommunityServices\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation flagCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \DBCDK\CommunityServices\Model\InlineResponse200
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCount($where = null)
    {
        list($response) = $this->flagCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation flagCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/Flags/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse200',
                '/Flags/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Flag $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCreate($data = null)
    {
        list($response) = $this->flagCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation flagCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Flag $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Flags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/Flags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagCreateChangeStreamGetFlagsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCreateChangeStreamGetFlagsChangeStream($options = null)
    {
        list($response) = $this->flagCreateChangeStreamGetFlagsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation flagCreateChangeStreamGetFlagsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCreateChangeStreamGetFlagsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Flags/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Flags/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagCreateChangeStreamPostFlagsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCreateChangeStreamPostFlagsChangeStream($options = null)
    {
        list($response) = $this->flagCreateChangeStreamPostFlagsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation flagCreateChangeStreamPostFlagsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return Array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagCreateChangeStreamPostFlagsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Flags/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Flags/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagDeleteById
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagDeleteById($id)
    {
        list($response) = $this->flagDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagDeleteByIdWithHttpInfo
     *
     * Delete a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagDeleteById');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Flags/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagExistsGetFlagsidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagExistsGetFlagsidExists($id)
    {
        list($response) = $this->flagExistsGetFlagsidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagExistsGetFlagsidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagExistsGetFlagsidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagExistsGetFlagsidExists');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse2001',
                '/Flags/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagExistsHeadFlagsid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \DBCDK\CommunityServices\Model\InlineResponse2001
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagExistsHeadFlagsid($id)
    {
        list($response) = $this->flagExistsHeadFlagsidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagExistsHeadFlagsidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return Array of \DBCDK\CommunityServices\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagExistsHeadFlagsidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagExistsHeadFlagsid');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\InlineResponse2001',
                '/Flags/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Flag[]
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagFind($filter = null)
    {
        list($response) = $this->flagFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation flagFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag[], HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Flags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag[]',
                '/Flags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagFindById
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagFindById($id, $filter = null)
    {
        list($response) = $this->flagFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation flagFindByIdWithHttpInfo
     *
     * Find a model instance by id from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagFindById');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/Flags/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagFindOne($filter = null)
    {
        list($response) = $this->flagFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation flagFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Flags/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/Flags/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeCreateComments
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreateComments($id, $data = null)
    {
        list($response) = $this->flagPrototypeCreateCommentsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeCreateCommentsWithHttpInfo
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreateCommentsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeCreateComments');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment',
                '/Flags/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeCreateGroups
     *
     * Creates a new instance in groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Group
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreateGroups($id, $data = null)
    {
        list($response) = $this->flagPrototypeCreateGroupsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeCreateGroupsWithHttpInfo
     *
     * Creates a new instance in groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Group, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreateGroupsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeCreateGroups');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group',
                '/Flags/{id}/groups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeCreatePosts
     *
     * Creates a new instance in posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Post
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreatePosts($id, $data = null)
    {
        list($response) = $this->flagPrototypeCreatePostsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeCreatePostsWithHttpInfo
     *
     * Creates a new instance in posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Post, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreatePostsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeCreatePosts');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post',
                '/Flags/{id}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeCreateReviews
     *
     * Creates a new instance in reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreateReviews($id, $data = null)
    {
        list($response) = $this->flagPrototypeCreateReviewsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeCreateReviewsWithHttpInfo
     *
     * Creates a new instance in reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeCreateReviewsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeCreateReviews');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/Flags/{id}/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeDestroyComments
     *
     * Deletes comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyComments($id)
    {
        list($response) = $this->flagPrototypeDestroyCommentsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagPrototypeDestroyCommentsWithHttpInfo
     *
     * Deletes comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyCommentsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeDestroyComments');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Flags/{id}/comments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeDestroyGroups
     *
     * Deletes groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyGroups($id)
    {
        list($response) = $this->flagPrototypeDestroyGroupsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagPrototypeDestroyGroupsWithHttpInfo
     *
     * Deletes groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyGroupsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeDestroyGroups');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Flags/{id}/groups'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeDestroyPosts
     *
     * Deletes posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyPosts($id)
    {
        list($response) = $this->flagPrototypeDestroyPostsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagPrototypeDestroyPostsWithHttpInfo
     *
     * Deletes posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyPostsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeDestroyPosts');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Flags/{id}/posts'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeDestroyReviews
     *
     * Deletes reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return void
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyReviews($id)
    {
        list($response) = $this->flagPrototypeDestroyReviewsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation flagPrototypeDestroyReviewsWithHttpInfo
     *
     * Deletes reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeDestroyReviewsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeDestroyReviews');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Flags/{id}/reviews'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeGetComments
     *
     * Fetches hasOne relation comments.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetComments($id, $refresh = null)
    {
        list($response) = $this->flagPrototypeGetCommentsWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation flagPrototypeGetCommentsWithHttpInfo
     *
     * Fetches hasOne relation comments.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetCommentsWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeGetComments');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment',
                '/Flags/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeGetGroups
     *
     * Fetches hasOne relation groups.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Group
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetGroups($id, $refresh = null)
    {
        list($response) = $this->flagPrototypeGetGroupsWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation flagPrototypeGetGroupsWithHttpInfo
     *
     * Fetches hasOne relation groups.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Group, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetGroupsWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeGetGroups');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group',
                '/Flags/{id}/groups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeGetOwner
     *
     * Fetches belongsTo relation owner.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Profile
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetOwner($id, $refresh = null)
    {
        list($response) = $this->flagPrototypeGetOwnerWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation flagPrototypeGetOwnerWithHttpInfo
     *
     * Fetches belongsTo relation owner.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetOwnerWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeGetOwner');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/owner";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Profile',
                '/Flags/{id}/owner'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeGetPosts
     *
     * Fetches hasOne relation posts.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Post
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetPosts($id, $refresh = null)
    {
        list($response) = $this->flagPrototypeGetPostsWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation flagPrototypeGetPostsWithHttpInfo
     *
     * Fetches hasOne relation posts.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Post, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetPostsWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeGetPosts');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post',
                '/Flags/{id}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeGetReviews
     *
     * Fetches hasOne relation reviews.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetReviews($id, $refresh = null)
    {
        list($response) = $this->flagPrototypeGetReviewsWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation flagPrototypeGetReviewsWithHttpInfo
     *
     * Fetches hasOne relation reviews.
     *
     * @param string $id PersistedModel id (required)
     * @param bool $refresh  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeGetReviewsWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeGetReviews');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/Flags/{id}/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data An object of model property name/value pairs (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateAttributes($id, $data = null)
    {
        list($response) = $this->flagPrototypeUpdateAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeUpdateAttributesWithHttpInfo
     *
     * Update attributes for a model instance and persist it into the data source.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Flag $data An object of model property name/value pairs (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeUpdateAttributes');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/Flags/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeUpdateComments
     *
     * Update comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Comment
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateComments($id, $data = null)
    {
        list($response) = $this->flagPrototypeUpdateCommentsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeUpdateCommentsWithHttpInfo
     *
     * Update comments of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Comment $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateCommentsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeUpdateComments');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Comment',
                '/Flags/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeUpdateGroups
     *
     * Update groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Group
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateGroups($id, $data = null)
    {
        list($response) = $this->flagPrototypeUpdateGroupsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeUpdateGroupsWithHttpInfo
     *
     * Update groups of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Group $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Group, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateGroupsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeUpdateGroups');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Group',
                '/Flags/{id}/groups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Group', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Group', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeUpdatePosts
     *
     * Update posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Post
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdatePosts($id, $data = null)
    {
        list($response) = $this->flagPrototypeUpdatePostsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeUpdatePostsWithHttpInfo
     *
     * Update posts of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Post $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Post, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdatePostsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeUpdatePosts');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Post',
                '/Flags/{id}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Post', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Post', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagPrototypeUpdateReviews
     *
     * Update reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return \DBCDK\CommunityServices\Model\Review
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateReviews($id, $data = null)
    {
        list($response) = $this->flagPrototypeUpdateReviewsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation flagPrototypeUpdateReviewsWithHttpInfo
     *
     * Update reviews of this model.
     *
     * @param string $id PersistedModel id (required)
     * @param \DBCDK\CommunityServices\Model\Review $data  (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Review, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagPrototypeUpdateReviewsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flagPrototypeUpdateReviews');
        }
        // parse inputs
        $resourcePath = "/Flags/{id}/reviews";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Review',
                '/Flags/{id}/reviews'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Review', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Review', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagUpdateAll
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Flag $data An object of model property name/value pairs (optional)
     * @return object
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagUpdateAll($where = null, $data = null)
    {
        list($response) = $this->flagUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation flagUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \DBCDK\CommunityServices\Model\Flag $data An object of model property name/value pairs (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Flags/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Flags/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flagUpsert
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Flag $data Model instance data (optional)
     * @return \DBCDK\CommunityServices\Model\Flag
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagUpsert($data = null)
    {
        list($response) = $this->flagUpsertWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation flagUpsertWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source.
     *
     * @param \DBCDK\CommunityServices\Model\Flag $data Model instance data (optional)
     * @return Array of \DBCDK\CommunityServices\Model\Flag, HTTP status code, HTTP response headers (array of strings)
     * @throws \DBCDK\CommunityServices\ApiException on non-2xx response
     */
    public function flagUpsertWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Flags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DBCDK\CommunityServices\Model\Flag',
                '/Flags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\DBCDK\CommunityServices\Model\Flag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DBCDK\CommunityServices\Model\Flag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
