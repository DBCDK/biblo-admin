<?php
/**
 * Review
 *
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Model;

use \ArrayAccess;

/**
 * Review Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     DBCDK\CommunityServices
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Review implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'review';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'pid' => 'string',
        'libraryid' => 'string',
        'worktype' => 'string',
        'content' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'rating' => 'double',
        'markedAsDeleted' => 'bool',
        'palleid' => 'double',
        'id' => 'double',
        'reviewownerid' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'pid' => 'pid',
        'libraryid' => 'libraryid',
        'worktype' => 'worktype',
        'content' => 'content',
        'created' => 'created',
        'modified' => 'modified',
        'rating' => 'rating',
        'markedAsDeleted' => 'markedAsDeleted',
        'palleid' => 'palleid',
        'id' => 'id',
        'reviewownerid' => 'reviewownerid'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'pid' => 'setPid',
        'libraryid' => 'setLibraryid',
        'worktype' => 'setWorktype',
        'content' => 'setContent',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'rating' => 'setRating',
        'markedAsDeleted' => 'setMarkedAsDeleted',
        'palleid' => 'setPalleid',
        'id' => 'setId',
        'reviewownerid' => 'setReviewownerid'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'pid' => 'getPid',
        'libraryid' => 'getLibraryid',
        'worktype' => 'getWorktype',
        'content' => 'getContent',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'rating' => 'getRating',
        'markedAsDeleted' => 'getMarkedAsDeleted',
        'palleid' => 'getPalleid',
        'id' => 'getId',
        'reviewownerid' => 'getReviewownerid'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['libraryid'] = isset($data['libraryid']) ? $data['libraryid'] : null;
        $this->container['worktype'] = isset($data['worktype']) ? $data['worktype'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['markedAsDeleted'] = isset($data['markedAsDeleted']) ? $data['markedAsDeleted'] : null;
        $this->container['palleid'] = isset($data['palleid']) ? $data['palleid'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reviewownerid'] = isset($data['reviewownerid']) ? $data['reviewownerid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['pid'] === null) {
            $invalid_properties[] = "'pid' can't be null";
        }
        if ($this->container['libraryid'] === null) {
            $invalid_properties[] = "'libraryid' can't be null";
        }
        if ($this->container['worktype'] === null) {
            $invalid_properties[] = "'worktype' can't be null";
        }
        if (strlen($this->container['content']) > 25000) {
            $invalid_properties[] = "invalid value for 'content', the character length must be smaller than or equal to 25000.";
        }
        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalid_properties[] = "'modified' can't be null";
        }
        if ($this->container['rating'] === null) {
            $invalid_properties[] = "'rating' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['pid'] === null) {
            return false;
        }
        if ($this->container['libraryid'] === null) {
            return false;
        }
        if ($this->container['worktype'] === null) {
            return false;
        }
        if (strlen($this->container['content']) > 25000) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['rating'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets pid
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     * @param string $pid
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets libraryid
     * @return string
     */
    public function getLibraryid()
    {
        return $this->container['libraryid'];
    }

    /**
     * Sets libraryid
     * @param string $libraryid
     * @return $this
     */
    public function setLibraryid($libraryid)
    {
        $this->container['libraryid'] = $libraryid;

        return $this;
    }

    /**
     * Gets worktype
     * @return string
     */
    public function getWorktype()
    {
        return $this->container['worktype'];
    }

    /**
     * Sets worktype
     * @param string $worktype
     * @return $this
     */
    public function setWorktype($worktype)
    {
        $this->container['worktype'] = $worktype;

        return $this;
    }

    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param string $content
     * @return $this
     */
    public function setContent($content)
    {
        if (strlen($content) > 25000) {
            throw new \InvalidArgumentException('invalid length for $content when calling Review., must be smaller than or equal to 25000.');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \DateTime $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets rating
     * @return double
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param double $rating
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets markedAsDeleted
     * @return bool
     */
    public function getMarkedAsDeleted()
    {
        return $this->container['markedAsDeleted'];
    }

    /**
     * Sets markedAsDeleted
     * @param bool $markedAsDeleted
     * @return $this
     */
    public function setMarkedAsDeleted($markedAsDeleted)
    {
        $this->container['markedAsDeleted'] = $markedAsDeleted;

        return $this;
    }

    /**
     * Gets palleid
     * @return double
     */
    public function getPalleid()
    {
        return $this->container['palleid'];
    }

    /**
     * Sets palleid
     * @param double $palleid
     * @return $this
     */
    public function setPalleid($palleid)
    {
        $this->container['palleid'] = $palleid;

        return $this;
    }

    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param double $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reviewownerid
     * @return double
     */
    public function getReviewownerid()
    {
        return $this->container['reviewownerid'];
    }

    /**
     * Sets reviewownerid
     * @param double $reviewownerid
     * @return $this
     */
    public function setReviewownerid($reviewownerid)
    {
        $this->container['reviewownerid'] = $reviewownerid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this));
    }
}


