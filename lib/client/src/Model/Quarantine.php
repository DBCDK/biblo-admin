<?php
/**
 * Quarantine
 *
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Model;

use \ArrayAccess;

/**
 * Quarantine Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     DBCDK\CommunityServices
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Quarantine implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Quarantine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'reason' => 'string',
        'end' => '\DateTime',
        'start' => '\DateTime',
        'id' => 'double',
        'quarantinedProfileId' => 'double',
        'quarantineCreatorProfileId' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'reason' => 'reason',
        'end' => 'end',
        'start' => 'start',
        'id' => 'id',
        'quarantinedProfileId' => 'quarantinedProfileId',
        'quarantineCreatorProfileId' => 'quarantineCreatorProfileId'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'reason' => 'setReason',
        'end' => 'setEnd',
        'start' => 'setStart',
        'id' => 'setId',
        'quarantinedProfileId' => 'setQuarantinedProfileId',
        'quarantineCreatorProfileId' => 'setQuarantineCreatorProfileId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'reason' => 'getReason',
        'end' => 'getEnd',
        'start' => 'getStart',
        'id' => 'getId',
        'quarantinedProfileId' => 'getQuarantinedProfileId',
        'quarantineCreatorProfileId' => 'getQuarantineCreatorProfileId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['quarantinedProfileId'] = isset($data['quarantinedProfileId']) ? $data['quarantinedProfileId'] : null;
        $this->container['quarantineCreatorProfileId'] = isset($data['quarantineCreatorProfileId']) ? $data['quarantineCreatorProfileId'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['end'] === null) {
            $invalid_properties[] = "'end' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalid_properties[] = "'start' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['end'] === null) {
            return false;
        }
        if ($this->container['start'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets end
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     * @param \DateTime $end
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets start
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     * @param \DateTime $start
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param double $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quarantinedProfileId
     * @return double
     */
    public function getQuarantinedProfileId()
    {
        return $this->container['quarantinedProfileId'];
    }

    /**
     * Sets quarantinedProfileId
     * @param double $quarantinedProfileId
     * @return $this
     */
    public function setQuarantinedProfileId($quarantinedProfileId)
    {
        $this->container['quarantinedProfileId'] = $quarantinedProfileId;

        return $this;
    }

    /**
     * Gets quarantineCreatorProfileId
     * @return double
     */
    public function getQuarantineCreatorProfileId()
    {
        return $this->container['quarantineCreatorProfileId'];
    }

    /**
     * Sets quarantineCreatorProfileId
     * @param double $quarantineCreatorProfileId
     * @return $this
     */
    public function setQuarantineCreatorProfileId($quarantineCreatorProfileId)
    {
        $this->container['quarantineCreatorProfileId'] = $quarantineCreatorProfileId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this));
    }
}


