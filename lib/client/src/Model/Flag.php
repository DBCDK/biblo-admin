<?php
/**
 * Flag
 *
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Model;

use \ArrayAccess;

/**
 * Flag Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     DBCDK\CommunityServices
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Flag implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Flag';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'timeFlagged' => '\DateTime',
        'description' => 'string',
        'markedAsRead' => 'bool',
        'id' => 'double',
        'ownerId' => 'double',
        'comments' => '\DBCDK\CommunityServices\Model\Comment',
        'posts' => '\DBCDK\CommunityServices\Model\Post',
        'groups' => '\DBCDK\CommunityServices\Model\Group',
        'groupFlagsId' => 'double',
        'postFlagsId' => 'double',
        'commentFlagsId' => 'double',
        'reviewFlagsId' => 'double',
        'reviews' => '\DBCDK\CommunityServices\Model\Review'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'timeFlagged' => 'timeFlagged',
        'description' => 'description',
        'markedAsRead' => 'markedAsRead',
        'id' => 'id',
        'ownerId' => 'ownerId',
        'comments' => '_comments',
        'posts' => '_posts',
        'groups' => '_groups',
        'groupFlagsId' => 'groupFlagsId',
        'postFlagsId' => 'postFlagsId',
        'commentFlagsId' => 'commentFlagsId',
        'reviewFlagsId' => 'reviewFlagsId',
        'reviews' => '_reviews'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'timeFlagged' => 'setTimeFlagged',
        'description' => 'setDescription',
        'markedAsRead' => 'setMarkedAsRead',
        'id' => 'setId',
        'ownerId' => 'setOwnerId',
        'comments' => 'setComments',
        'posts' => 'setPosts',
        'groups' => 'setGroups',
        'groupFlagsId' => 'setGroupFlagsId',
        'postFlagsId' => 'setPostFlagsId',
        'commentFlagsId' => 'setCommentFlagsId',
        'reviewFlagsId' => 'setReviewFlagsId',
        'reviews' => 'setReviews'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'timeFlagged' => 'getTimeFlagged',
        'description' => 'getDescription',
        'markedAsRead' => 'getMarkedAsRead',
        'id' => 'getId',
        'ownerId' => 'getOwnerId',
        'comments' => 'getComments',
        'posts' => 'getPosts',
        'groups' => 'getGroups',
        'groupFlagsId' => 'getGroupFlagsId',
        'postFlagsId' => 'getPostFlagsId',
        'commentFlagsId' => 'getCommentFlagsId',
        'reviewFlagsId' => 'getReviewFlagsId',
        'reviews' => 'getReviews'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timeFlagged'] = isset($data['timeFlagged']) ? $data['timeFlagged'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['markedAsRead'] = isset($data['markedAsRead']) ? $data['markedAsRead'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ownerId'] = isset($data['ownerId']) ? $data['ownerId'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['posts'] = isset($data['posts']) ? $data['posts'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['groupFlagsId'] = isset($data['groupFlagsId']) ? $data['groupFlagsId'] : null;
        $this->container['postFlagsId'] = isset($data['postFlagsId']) ? $data['postFlagsId'] : null;
        $this->container['commentFlagsId'] = isset($data['commentFlagsId']) ? $data['commentFlagsId'] : null;
        $this->container['reviewFlagsId'] = isset($data['reviewFlagsId']) ? $data['reviewFlagsId'] : null;
        $this->container['reviews'] = isset($data['reviews']) ? $data['reviews'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['timeFlagged'] === null) {
            $invalid_properties[] = "'timeFlagged' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['markedAsRead'] === null) {
            $invalid_properties[] = "'markedAsRead' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['timeFlagged'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['markedAsRead'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timeFlagged
     * @return \DateTime
     */
    public function getTimeFlagged()
    {
        return $this->container['timeFlagged'];
    }

    /**
     * Sets timeFlagged
     * @param \DateTime $timeFlagged
     * @return $this
     */
    public function setTimeFlagged($timeFlagged)
    {
        $this->container['timeFlagged'] = $timeFlagged;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets markedAsRead
     * @return bool
     */
    public function getMarkedAsRead()
    {
        return $this->container['markedAsRead'];
    }

    /**
     * Sets markedAsRead
     * @param bool $markedAsRead
     * @return $this
     */
    public function setMarkedAsRead($markedAsRead)
    {
        $this->container['markedAsRead'] = $markedAsRead;

        return $this;
    }

    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param double $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ownerId
     * @return double
     */
    public function getOwnerId()
    {
        return $this->container['ownerId'];
    }

    /**
     * Sets ownerId
     * @param double $ownerId
     * @return $this
     */
    public function setOwnerId($ownerId)
    {
        $this->container['ownerId'] = $ownerId;

        return $this;
    }

    /**
     * Gets comments
     * @return \DBCDK\CommunityServices\Model\Comment
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     * @param \DBCDK\CommunityServices\Model\Comment $comments
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets posts
     * @return \DBCDK\CommunityServices\Model\Post
     */
    public function getPosts()
    {
        return $this->container['posts'];
    }

    /**
     * Sets posts
     * @param \DBCDK\CommunityServices\Model\Post $posts
     * @return $this
     */
    public function setPosts($posts)
    {
        $this->container['posts'] = $posts;

        return $this;
    }

    /**
     * Gets groups
     * @return \DBCDK\CommunityServices\Model\Group
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     * @param \DBCDK\CommunityServices\Model\Group $groups
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets groupFlagsId
     * @return double
     */
    public function getGroupFlagsId()
    {
        return $this->container['groupFlagsId'];
    }

    /**
     * Sets groupFlagsId
     * @param double $groupFlagsId
     * @return $this
     */
    public function setGroupFlagsId($groupFlagsId)
    {
        $this->container['groupFlagsId'] = $groupFlagsId;

        return $this;
    }

    /**
     * Gets postFlagsId
     * @return double
     */
    public function getPostFlagsId()
    {
        return $this->container['postFlagsId'];
    }

    /**
     * Sets postFlagsId
     * @param double $postFlagsId
     * @return $this
     */
    public function setPostFlagsId($postFlagsId)
    {
        $this->container['postFlagsId'] = $postFlagsId;

        return $this;
    }

    /**
     * Gets commentFlagsId
     * @return double
     */
    public function getCommentFlagsId()
    {
        return $this->container['commentFlagsId'];
    }

    /**
     * Sets commentFlagsId
     * @param double $commentFlagsId
     * @return $this
     */
    public function setCommentFlagsId($commentFlagsId)
    {
        $this->container['commentFlagsId'] = $commentFlagsId;

        return $this;
    }

    /**
     * Gets reviewFlagsId
     * @return double
     */
    public function getReviewFlagsId()
    {
        return $this->container['reviewFlagsId'];
    }

    /**
     * Sets reviewFlagsId
     * @param double $reviewFlagsId
     * @return $this
     */
    public function setReviewFlagsId($reviewFlagsId)
    {
        $this->container['reviewFlagsId'] = $reviewFlagsId;

        return $this;
    }

    /**
     * Gets reviews
     * @return \DBCDK\CommunityServices\Model\Review
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     * @param \DBCDK\CommunityServices\Model\Review $reviews
     * @return $this
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this));
    }
}


