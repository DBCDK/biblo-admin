<?php
/**
 * AdminMessageApiTest
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace DBCDK\CommunityServices;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * AdminMessageApiTest Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminMessageApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for adminMessageCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testAdminMessageCount()
    {

    }

    /**
     * Test case for adminMessageCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testAdminMessageCreate()
    {

    }

    /**
     * Test case for adminMessageCreateChangeStreamGetAdminMessagesChangeStream
     *
     * Create a change stream..
     *
     */
    public function testAdminMessageCreateChangeStreamGetAdminMessagesChangeStream()
    {

    }

    /**
     * Test case for adminMessageCreateChangeStreamPostAdminMessagesChangeStream
     *
     * Create a change stream..
     *
     */
    public function testAdminMessageCreateChangeStreamPostAdminMessagesChangeStream()
    {

    }

    /**
     * Test case for adminMessageDeleteById
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testAdminMessageDeleteById()
    {

    }

    /**
     * Test case for adminMessageExistsGetAdminMessagesidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testAdminMessageExistsGetAdminMessagesidExists()
    {

    }

    /**
     * Test case for adminMessageExistsHeadAdminMessagesid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testAdminMessageExistsHeadAdminMessagesid()
    {

    }

    /**
     * Test case for adminMessageFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testAdminMessageFind()
    {

    }

    /**
     * Test case for adminMessageFindById
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testAdminMessageFindById()
    {

    }

    /**
     * Test case for adminMessageFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testAdminMessageFindOne()
    {

    }

    /**
     * Test case for adminMessagePrototypeGetReceiver
     *
     * Fetches belongsTo relation receiver..
     *
     */
    public function testAdminMessagePrototypeGetReceiver()
    {

    }

    /**
     * Test case for adminMessagePrototypeGetSender
     *
     * Fetches belongsTo relation sender..
     *
     */
    public function testAdminMessagePrototypeGetSender()
    {

    }

    /**
     * Test case for adminMessagePrototypeUpdateAttributesPatchAdminMessagesid
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testAdminMessagePrototypeUpdateAttributesPatchAdminMessagesid()
    {

    }

    /**
     * Test case for adminMessagePrototypeUpdateAttributesPutAdminMessagesid
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testAdminMessagePrototypeUpdateAttributesPutAdminMessagesid()
    {

    }

    /**
     * Test case for adminMessageReplaceById
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testAdminMessageReplaceById()
    {

    }

    /**
     * Test case for adminMessageReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testAdminMessageReplaceOrCreate()
    {

    }

    /**
     * Test case for adminMessageUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testAdminMessageUpdateAll()
    {

    }

    /**
     * Test case for adminMessageUpsertPatchAdminMessages
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testAdminMessageUpsertPatchAdminMessages()
    {

    }

    /**
     * Test case for adminMessageUpsertPutAdminMessages
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testAdminMessageUpsertPutAdminMessages()
    {

    }

    /**
     * Test case for adminMessageUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testAdminMessageUpsertWithWhere()
    {

    }

}
