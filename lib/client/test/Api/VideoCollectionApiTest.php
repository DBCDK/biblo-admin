<?php
/**
 * VideoCollectionApiTest
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace DBCDK\CommunityServices;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * VideoCollectionApiTest Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoCollectionApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for videoCollectionCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testVideoCollectionCount()
    {

    }

    /**
     * Test case for videoCollectionCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testVideoCollectionCreate()
    {

    }

    /**
     * Test case for videoCollectionCreateChangeStreamGetVideoCollectionsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testVideoCollectionCreateChangeStreamGetVideoCollectionsChangeStream()
    {

    }

    /**
     * Test case for videoCollectionCreateChangeStreamPostVideoCollectionsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testVideoCollectionCreateChangeStreamPostVideoCollectionsChangeStream()
    {

    }

    /**
     * Test case for videoCollectionDeleteById
     *
     * Delete a model instance by id from the data source..
     *
     */
    public function testVideoCollectionDeleteById()
    {

    }

    /**
     * Test case for videoCollectionExistsGetVideoCollectionsidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testVideoCollectionExistsGetVideoCollectionsidExists()
    {

    }

    /**
     * Test case for videoCollectionExistsHeadVideoCollectionsid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testVideoCollectionExistsHeadVideoCollectionsid()
    {

    }

    /**
     * Test case for videoCollectionFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testVideoCollectionFind()
    {

    }

    /**
     * Test case for videoCollectionFindById
     *
     * Find a model instance by id from the data source..
     *
     */
    public function testVideoCollectionFindById()
    {

    }

    /**
     * Test case for videoCollectionFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testVideoCollectionFindOne()
    {

    }

    /**
     * Test case for videoCollectionPrototypeCountResolutions
     *
     * Counts resolutions of videoCollection..
     *
     */
    public function testVideoCollectionPrototypeCountResolutions()
    {

    }

    /**
     * Test case for videoCollectionPrototypeCreateResolutions
     *
     * Creates a new instance in resolutions of this model..
     *
     */
    public function testVideoCollectionPrototypeCreateResolutions()
    {

    }

    /**
     * Test case for videoCollectionPrototypeDeleteResolutions
     *
     * Deletes all resolutions of this model..
     *
     */
    public function testVideoCollectionPrototypeDeleteResolutions()
    {

    }

    /**
     * Test case for videoCollectionPrototypeDestroyByIdResolutions
     *
     * Delete a related item by id for resolutions..
     *
     */
    public function testVideoCollectionPrototypeDestroyByIdResolutions()
    {

    }

    /**
     * Test case for videoCollectionPrototypeFindByIdResolutions
     *
     * Find a related item by id for resolutions..
     *
     */
    public function testVideoCollectionPrototypeFindByIdResolutions()
    {

    }

    /**
     * Test case for videoCollectionPrototypeGetResolutions
     *
     * Queries resolutions of videoCollection..
     *
     */
    public function testVideoCollectionPrototypeGetResolutions()
    {

    }

    /**
     * Test case for videoCollectionPrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source..
     *
     */
    public function testVideoCollectionPrototypeUpdateAttributes()
    {

    }

    /**
     * Test case for videoCollectionPrototypeUpdateByIdResolutions
     *
     * Update a related item by id for resolutions..
     *
     */
    public function testVideoCollectionPrototypeUpdateByIdResolutions()
    {

    }

    /**
     * Test case for videoCollectionUpdateAll
     *
     * Update instances of the model matched by where from the data source..
     *
     */
    public function testVideoCollectionUpdateAll()
    {

    }

    /**
     * Test case for videoCollectionUpsert
     *
     * Update an existing model instance or insert a new one into the data source..
     *
     */
    public function testVideoCollectionUpsert()
    {

    }

}
