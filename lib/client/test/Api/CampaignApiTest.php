<?php
/**
 * CampaignApiTest
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace DBCDK\CommunityServices;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * CampaignApiTest Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for campaignCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testCampaignCount()
    {

    }

    /**
     * Test case for campaignCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testCampaignCreate()
    {

    }

    /**
     * Test case for campaignCreateChangeStreamGetCampaignsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testCampaignCreateChangeStreamGetCampaignsChangeStream()
    {

    }

    /**
     * Test case for campaignCreateChangeStreamPostCampaignsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testCampaignCreateChangeStreamPostCampaignsChangeStream()
    {

    }

    /**
     * Test case for campaignDeleteById
     *
     * Delete a model instance by id from the data source..
     *
     */
    public function testCampaignDeleteById()
    {

    }

    /**
     * Test case for campaignExistsGetCampaignsidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testCampaignExistsGetCampaignsidExists()
    {

    }

    /**
     * Test case for campaignExistsHeadCampaignsid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testCampaignExistsHeadCampaignsid()
    {

    }

    /**
     * Test case for campaignFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testCampaignFind()
    {

    }

    /**
     * Test case for campaignFindById
     *
     * Find a model instance by id from the data source..
     *
     */
    public function testCampaignFindById()
    {

    }

    /**
     * Test case for campaignFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testCampaignFindOne()
    {

    }

    /**
     * Test case for campaignPrototypeCountWorkTypes
     *
     * Counts workTypes of Campaign..
     *
     */
    public function testCampaignPrototypeCountWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeCreateGroup
     *
     * Creates a new instance in group of this model..
     *
     */
    public function testCampaignPrototypeCreateGroup()
    {

    }

    /**
     * Test case for campaignPrototypeCreateWorkTypes
     *
     * Creates a new instance in workTypes of this model..
     *
     */
    public function testCampaignPrototypeCreateWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeDeleteWorkTypes
     *
     * Deletes all workTypes of this model..
     *
     */
    public function testCampaignPrototypeDeleteWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeDestroyByIdWorkTypes
     *
     * Delete a related item by id for workTypes..
     *
     */
    public function testCampaignPrototypeDestroyByIdWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeDestroyGroup
     *
     * Deletes group of this model..
     *
     */
    public function testCampaignPrototypeDestroyGroup()
    {

    }

    /**
     * Test case for campaignPrototypeExistsWorkTypes
     *
     * Check the existence of workTypes relation to an item by id..
     *
     */
    public function testCampaignPrototypeExistsWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeFindByIdWorkTypes
     *
     * Find a related item by id for workTypes..
     *
     */
    public function testCampaignPrototypeFindByIdWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeGetGroup
     *
     * Fetches hasOne relation group..
     *
     */
    public function testCampaignPrototypeGetGroup()
    {

    }

    /**
     * Test case for campaignPrototypeGetWorkTypes
     *
     * Queries workTypes of Campaign..
     *
     */
    public function testCampaignPrototypeGetWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeLinkWorkTypes
     *
     * Add a related item by id for workTypes..
     *
     */
    public function testCampaignPrototypeLinkWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeUnlinkWorkTypes
     *
     * Remove the workTypes relation to an item by id..
     *
     */
    public function testCampaignPrototypeUnlinkWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source..
     *
     */
    public function testCampaignPrototypeUpdateAttributes()
    {

    }

    /**
     * Test case for campaignPrototypeUpdateByIdWorkTypes
     *
     * Update a related item by id for workTypes..
     *
     */
    public function testCampaignPrototypeUpdateByIdWorkTypes()
    {

    }

    /**
     * Test case for campaignPrototypeUpdateGroup
     *
     * Update group of this model..
     *
     */
    public function testCampaignPrototypeUpdateGroup()
    {

    }

    /**
     * Test case for campaignUpdateAll
     *
     * Update instances of the model matched by where from the data source..
     *
     */
    public function testCampaignUpdateAll()
    {

    }

    /**
     * Test case for campaignUpsert
     *
     * Update an existing model instance or insert a new one into the data source..
     *
     */
    public function testCampaignUpsert()
    {

    }

}
