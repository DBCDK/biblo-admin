<?php
/**
 * ImageCollectionApiTest
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * communityservice
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace DBCDK\CommunityServices;

use \DBCDK\CommunityServices\Configuration;
use \DBCDK\CommunityServices\ApiClient;
use \DBCDK\CommunityServices\ApiException;
use \DBCDK\CommunityServices\ObjectSerializer;

/**
 * ImageCollectionApiTest Class Doc Comment
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageCollectionApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for imageCollectionCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testImageCollectionCount()
    {

    }

    /**
     * Test case for imageCollectionCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testImageCollectionCreate()
    {

    }

    /**
     * Test case for imageCollectionCreateChangeStreamGetImageCollectionsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testImageCollectionCreateChangeStreamGetImageCollectionsChangeStream()
    {

    }

    /**
     * Test case for imageCollectionCreateChangeStreamPostImageCollectionsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testImageCollectionCreateChangeStreamPostImageCollectionsChangeStream()
    {

    }

    /**
     * Test case for imageCollectionDeleteById
     *
     * Delete a model instance by id from the data source..
     *
     */
    public function testImageCollectionDeleteById()
    {

    }

    /**
     * Test case for imageCollectionDownload
     *
     * Downloads an image of the specified size, if that's not available, it downloads an image..
     *
     */
    public function testImageCollectionDownload()
    {

    }

    /**
     * Test case for imageCollectionExistsGetImageCollectionsidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testImageCollectionExistsGetImageCollectionsidExists()
    {

    }

    /**
     * Test case for imageCollectionExistsHeadImageCollectionsid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testImageCollectionExistsHeadImageCollectionsid()
    {

    }

    /**
     * Test case for imageCollectionFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testImageCollectionFind()
    {

    }

    /**
     * Test case for imageCollectionFindById
     *
     * Find a model instance by id from the data source..
     *
     */
    public function testImageCollectionFindById()
    {

    }

    /**
     * Test case for imageCollectionFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testImageCollectionFindOne()
    {

    }

    /**
     * Test case for imageCollectionPrototypeCountResolutions
     *
     * Counts resolutions of imageCollection..
     *
     */
    public function testImageCollectionPrototypeCountResolutions()
    {

    }

    /**
     * Test case for imageCollectionPrototypeCreateResolutions
     *
     * Creates a new instance in resolutions of this model..
     *
     */
    public function testImageCollectionPrototypeCreateResolutions()
    {

    }

    /**
     * Test case for imageCollectionPrototypeDeleteResolutions
     *
     * Deletes all resolutions of this model..
     *
     */
    public function testImageCollectionPrototypeDeleteResolutions()
    {

    }

    /**
     * Test case for imageCollectionPrototypeDestroyByIdResolutions
     *
     * Delete a related item by id for resolutions..
     *
     */
    public function testImageCollectionPrototypeDestroyByIdResolutions()
    {

    }

    /**
     * Test case for imageCollectionPrototypeFindByIdResolutions
     *
     * Find a related item by id for resolutions..
     *
     */
    public function testImageCollectionPrototypeFindByIdResolutions()
    {

    }

    /**
     * Test case for imageCollectionPrototypeGetResolutions
     *
     * Queries resolutions of imageCollection..
     *
     */
    public function testImageCollectionPrototypeGetResolutions()
    {

    }

    /**
     * Test case for imageCollectionPrototypeUpdateAttributes
     *
     * Update attributes for a model instance and persist it into the data source..
     *
     */
    public function testImageCollectionPrototypeUpdateAttributes()
    {

    }

    /**
     * Test case for imageCollectionPrototypeUpdateByIdResolutions
     *
     * Update a related item by id for resolutions..
     *
     */
    public function testImageCollectionPrototypeUpdateByIdResolutions()
    {

    }

    /**
     * Test case for imageCollectionUpdateAll
     *
     * Update instances of the model matched by where from the data source..
     *
     */
    public function testImageCollectionUpdateAll()
    {

    }

    /**
     * Test case for imageCollectionUpload
     *
     * Uploads an image..
     *
     */
    public function testImageCollectionUpload()
    {

    }

    /**
     * Test case for imageCollectionUpsert
     *
     * Update an existing model instance or insert a new one into the data source..
     *
     */
    public function testImageCollectionUpsert()
    {

    }

}
