<?php
/**
 * @file
 * Module file for dbcdk_community_content.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\field\Field;

/**
 * Implements hook_node_presave().
 *
 * Duplicate the title of a node to the slug field if the slug field is empty.
 * We do this because article urls depend on having a slug field value for the
 * article Pathauto pattern.
 */
function dbcdk_community_content_node_presave(Node $node) {
  if (empty($node->get('field_slug')->getString())) {
    /* @var \Drupal\pathauto\AliasCleaner $alias_cleaner */
    $alias_cleaner = \Drupal::service('pathauto.alias_cleaner');
    $node->set('field_slug', $alias_cleaner->cleanString($node->getTitle()));
  }
}

/**
 * Implements template_preprocess_views_view_field().
 *
 * Add a "target" property to the title-link render array.
 * We do this because all "node/{nid}" matches are redirected to the community
 * site and we wish to open all external links in a new window.
 */
function dbcdk_community_content_preprocess_views_view_field(&$variables) {
  // Defensive code to make sure it's a Field object we try to manipulate.
  // Other objects include but is not necessarily limited to: NodeBulkUpdate.
  /* @var \Drupal\views\Plugin\views\field\Field $field */
  if (($field = $variables['field']) instanceof Field) {
    // These changes should only happen on the title field on the content view.
    if (($field->field === 'title') && ($variables['view']->id() === 'content')) {
      // Get the title render array.
      $link = current($field->getItems($variables['row']))['rendered'];
      // Add "target" property to the link render array.
      $link['#attributes']['target'] = '_blank';
      // It is possible to call the renderer with $field->render_item() method
      // but it seems unstable (a method without DocBlock and unused parameters
      // inside the method).
      $renderer = \Drupal::service('renderer');
      // Override the "output" variable for the views-view-field template with a
      // new, rendered, link item.
      $variables['output'] = $renderer->render($link);
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Make the "Slug" and "Sub Path" fields part of an advanced details group.
 * We do this to give a better editorial experience by placing all additional
 * options for the content together.
 */
function dbcdk_community_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_article_form':
    case 'node_article_edit_form':
    case 'node_section_page_form':
    case 'node_section_page_edit_form':
      $url_group_name = 'url_group';
      $form[$url_group_name] = [
        '#type' => 'details',
        '#title' => new TranslatableMarkup('URL Group'),
        '#group' => 'advanced',
        '#open' => TRUE,
      ];
      foreach (['field_slug', 'field_sub_path'] as $field_name) {
        if (isset($form[$field_name])) {
          $form[$field_name]['#group'] = $url_group_name;
        }
      }

      // Append new submit handler for when a node is being saved (which is
      // triggered by the publish and unpublish actions).
      $form['actions']['publish']['#submit'][] = 'dbcdk_community_content_node_submit_handler';
      $form['actions']['unpublish']['#submit'][] = 'dbcdk_community_content_node_submit_handler';

      // Add custom styling on edit content forms
      $form['#attached']['library'][] = 'dbcdk_community_content/admin_custom_style';

      break;
  }
}

/**
 * Custom submit handler for nodes.
 *
 * Redirect the user to the content overview page after a node submit.
 * We do this because all "node/{node}" paths are being redirected to the
 * community site.
 * This does not have any effect on REST requests (node/{nid}?_format=...).
 */
function dbcdk_community_content_node_submit_handler(&$form, FormStateInterface $form_state) {
  // Redirect to the content overview route unless there is a "destination"
  // parameter.
  $destination = \Drupal::request()->query->get('destination');
  if (!empty($destination)) {
    $form_state->setRedirectUrl(Url::fromUserInput($destination));
  }
  else {
    $form_state->setRedirect('system.admin_content');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alter the title and description of the "name" field for the URL Structures
 * taxonomy form to be more descriptive about their use.
 */
function dbcdk_community_content_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  switch ($form_state->getBuildInfo()['form_id']) {
    case 'taxonomy_term_url_structures_form':
      /* @var \Drupal\Core\Field\FieldItemList $context['items'] */
      if ($context['items']->getName() === 'name') {
        $element['value']['#title'] = new TranslatableMarkup('Path');
        $element['value']['#description'] = new TranslatableMarkup('The path for this individual content category <em>(ex: <code>"news"</code>)</em>.');
      }
      break;
  }
}
