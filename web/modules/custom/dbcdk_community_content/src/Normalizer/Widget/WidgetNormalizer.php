<?php

namespace Drupal\dbcdk_community_content\Normalizer\Widget;

use Drupal\Core\Entity\FieldableEntityInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

/**
 * Base class for all widget normalizers.
 *
 * These normalizers will take an entity of a specific bundle and convert these
 * to a normalized array in the format:
 *
 * {
 *    "widgetName": 'Some name',
 *    "widgetConfig": {
 *      "propertyA": "foo"
 *      "propertyB": 42
 *    }
 * {
 *
 * @see https://github.com/DBCDK/biblo/wiki/Widgets
 */
abstract class WidgetNormalizer implements NormalizerInterface {

  /**
   * {@inheritdoc}
   */
  public function supportsNormalization($data, $format = NULL) {
    return $data->bundle() == $this->getSupportedBundle();
  }

  /**
   * {@inheritdoc}
   */
  public function normalize($object, $format = NULL, array $context = array()) {
    return [
      'widgetName' => $this->getWidgetName(),
      'widgetConfig' => $this->getWidgetConfig($object),
    ];
  }

  /**
   * Returns the name of the bundle supported by this normalizer.
   *
   * @return string
   *   Supported bundle name.
   */
  abstract protected function getSupportedBundle();

  /**
   * Returns the name of the widget generated by this normalizer.
   *
   * @return string
   *   Widget name.
   */
  abstract protected function getWidgetName();

  /**
   * Returns the configuration of widget based on the entity to be normalized.
   *
   * Normalization will usually be based on field data.
   *
   * @param \Drupal\Core\Entity\FieldableEntityInterface $object
   *   The entity to be normalized.
   *
   * @return mixed
   *   The normalized data.
   */
  abstract protected function getWidgetConfig(FieldableEntityInterface $object);

}
